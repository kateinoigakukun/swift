// RUN: %target-sil-opt %s -aa-kind=basic-aa -mem-behavior-dump -enable-mem-behavior-dump-all -o /dev/null | %FileCheck %s

// REQUIRES: asserts

import Builtin
import Swift

class C {
  @_hasStorage @_hasInitialValue final let prop: Builtin.Int32 { get }
}

class Parent {
  @_hasStorage var child: C { get set }
}

// Check the memory behavior of a read-only load relative to an
// unknown instruction with side effects.
//
// CHECK-LABEL: @testLetSideEffects
//
// The store does not affect the let-load (ref_element_addr).
// CHECK: PAIR #35.
// CHECK-NEXT:    %7 = begin_access [modify] [static] %1 : $*Builtin.Int32
// CHECK-NEXT:    %11 = ref_element_addr %10 : $C, #C.prop
// CHECK-NEXT:  r=0,w=0,se=0
//
// Any unknown instructions with side effects does affect the let-load.
// CHECK: PAIR #83.
// CHECK-NEXT:     end_borrow %{{.*}} : $C
// CHECK-NEXT:     ref_element_addr %{{.*}} : $C, #C.prop
// CHECK-NEXT:   r=1,w=1,se=1
// CHECK: PAIR #103.
// CHECK-NEXT:     destroy_value %0 : $Parent
// CHECK-NEXT:     ref_element_addr %{{.*}} : $C, #C.prop
// CHECK-NEXT:   r=1,w=1,se=1
sil [ossa] @testLetSideEffects : $@convention(thin) (@owned Parent, @inout Builtin.Int32) -> Builtin.Int32 {
bb0(%0 : @owned $Parent, %1 : $*Builtin.Int32):
  %borrow1 = begin_borrow %0 : $Parent
  %childAdr = ref_element_addr %borrow1 : $Parent, #Parent.child
  %child = load_borrow %childAdr : $*C
  end_borrow %borrow1 : $Parent

  %three = integer_literal $Builtin.Int32, 3
  %access = begin_access [modify] [static] %1 : $*Builtin.Int32
  store %three to [trivial] %access : $*Builtin.Int32
  end_access %access : $*Builtin.Int32

  %borrow2 = begin_borrow %child : $C
  %propAdr = ref_element_addr %borrow2 : $C, #C.prop
  %val = load [trivial] %propAdr : $*Builtin.Int32
  end_borrow %borrow2 : $C
  end_borrow %child : $C
  destroy_value %0 : $Parent
  return %val : $Builtin.Int32
}

// Check the memory behavior of access markers.
//
// CHECK-LABEL: @testReadWriteAccess
// CHECK: PAIR #0.
// CHECK-NEXT:     %{{.*}} = begin_access [read] [static] %0 : $*Builtin.Int32
// CHECK-NEXT:     %0 = argument of bb0 : $*Builtin.Int32
// CHECK-NEXT:   r=1,w=0,se=0
// CHECK: PAIR #1.
// CHECK-NEXT:     %{{.*}} = begin_access [read] [static] %0 : $*Builtin.Int32
// CHECK-NEXT:     load [trivial] %{{.*}} : $*Builtin.Int32
// CHECK-NEXT:   r=1,w=0,se=0
// CHECK: PAIR #3.
// CHECK-NEXT:     %{{.*}} = begin_access [read] [static] %0 : $*Builtin.Int32
// CHECK-NEXT:     %{{.*}} = begin_access [modify] [static] %0 : $*Builtin.Int32
// CHECK-NEXT:   r=1,w=0,se=0
// CHECK: PAIR #8.
// CHECK-NEXT:     end_access %{{.*}} : $*Builtin.Int32
// CHECK-NEXT:   %0 = argument of bb0 : $*Builtin.Int32
// CHECK-NEXT:   r=1,w=0,se=0
// CHECK: PAIR #9.
// CHECK-NEXT:    end_access %{{.*}} : $*Builtin.Int32
// CHECK-NEXT:    %{{.*}} = begin_access [read] [static] %0 : $*Builtin.Int32
// CHECK-NEXT:  r=1,w=0,se=0
// CHECK: PAIR #12.
// CHECK-NEXT:    end_access %{{.*}} : $*Builtin.Int32
// CHECK-NEXT:    %{{.*}} = begin_access [modify] [static] %0 : $*Builtin.Int32
// CHECK-NEXT:  r=1,w=0,se=0
// CHECK: PAIR #13.
// CHECK-NEXT:    %{{.*}} = begin_access [modify] [static] %0 : $*Builtin.Int32
// CHECK-NEXT:    %0 = argument of bb0 : $*Builtin.Int32
// CHECK-NEXT:  r=0,w=1,se=1
// CHECK: PAIR #14.
// CHECK-NEXT:    %{{.*}} = begin_access [modify] [static] %0 : $*Builtin.Int32
// CHECK-NEXT:    %{{.*}} = begin_access [read] [static] %0 : $*Builtin.Int32
// CHECK-NEXT:  r=0,w=1,se=1
// CHECK: PAIR #22.
// CHECK-NEXT:    end_access %{{.*}} : $*Builtin.Int32
// CHECK-NEXT:    %0 = argument of bb0 : $*Builtin.Int32
// CHECK-NEXT:  r=0,w=1,se=1
// CHECK: PAIR #23.
// CHECK-NEXT:    end_access %{{.*}} : $*Builtin.Int32
// CHECK-NEXT:    %{{.*}} = begin_access [read] [static] %0 : $*Builtin.Int32
// CHECK-NEXT:  r=0,w=1,se=1
// CHECK: PAIR #26.
// CHECK-NEXT:    end_access %{{.*}} : $*Builtin.Int32
// CHECK-NEXT:    %{{.*}} = begin_access [modify] [static] %0 : $*Builtin.Int32
// CHECK-NEXT:  r=0,w=1,se=1
sil [ossa] @testReadWriteAccess : $@convention(thin) (@inout Builtin.Int32) -> Builtin.Int32 {
bb0(%0 : $*Builtin.Int32):
  %read = begin_access [read] [static] %0 : $*Builtin.Int32
  %val = load [trivial] %read : $*Builtin.Int32
  end_access %read : $*Builtin.Int32
  %three = integer_literal $Builtin.Int32, 3
  %write = begin_access [modify] [static] %0 : $*Builtin.Int32
  store %three to [trivial] %write : $*Builtin.Int32
  end_access %write : $*Builtin.Int32
  return %val : $Builtin.Int32
}
